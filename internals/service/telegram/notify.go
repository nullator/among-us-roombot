package telegram

import (
	"among-us-roombot/internals/models"
	"fmt"
	"log/slog"
	"os"
	"time"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

func (b *Telegram) handleNotify(message *tgbotapi.Message) error {
	const path = "service.telegram.notufy.handleNotify"

	var host *models.Hoster
	host, err := b.rep.GetHoster(message.Chat.ID)
	if err != nil {
		slog.Error("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∏–∑ –ë–î –º–æ–¥–µ–ª–∏ —Ö–æ—Å—Ç–µ—Ä–∞")
		return fmt.Errorf("%s: %w", path, err)
	}

	if host == nil {
		msg_text := "–ù–µ —É–¥–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É —Ä–∞—Å—Å—ã–ª–∫–∏.\n\n" +
			"–°–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ —Ç—ã –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ —Ö–æ—Å—Ç–∏–ª —Ä—É–º—É, –ø–æ—ç—Ç–æ–º—É —É —Ç–µ–±—è –Ω–µ –º–æ–∂–µ—Ç " +
			"–±—ã—Ç—å –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤"
		msg := tgbotapi.NewMessage(message.Chat.ID, msg_text)
		msg.ReplyMarkup = list_kb
		_, err := b.bot.Send(msg)
		if err != nil {
			slog.Error("error send message to user")
			return fmt.Errorf("%s: %w", path, err)
		}
		slog.Info("–ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —É –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–µ—Ç –º–æ–¥–µ–ª–∏ —Ö–æ—Å—Ç–µ—Ä–∞",
			slog.String("user", message.From.String()),
			slog.Int64("id", message.Chat.ID))
		return nil
	}

	if len(host.Followers) == 0 {
		err = sendImage(b, message.Chat.ID, "notify.png")
		if err != nil {
			slog.Warn("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É")
		}

		msg := tgbotapi.NewMessage(message.Chat.ID, "–£ —Ç–µ–±—è –Ω–µ—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ üò¢")
		msg.ReplyMarkup = list_kb
		_, err := b.bot.Send(msg)
		if err != nil {
			slog.Error("error send message to user")
			return fmt.Errorf("%s: %w", path, err)
		}

		slog.Info("–ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —É –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–µ—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤",
			slog.String("user", message.From.String()),
			slog.Int64("id", message.Chat.ID))
		return nil
	}

	delta := time.Now().Unix() - host.LastSend.Unix()
	if delta < (60 * 60 * 6) {
		t := time.Unix((60*60*6)-delta, 0)
		t_str := fmt.Sprintf("%02d:%02d:%02d", t.Hour(), t.Minute(), t.Second())
		msg_text := fmt.Sprintf("–†–∞—Å—Å—ã–ª–∫—É –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –Ω–µ —á–∞—â–µ —á–µ–º —Ä–∞–∑ –≤ 6 —á–∞—Å–æ–≤, "+
			"—Å–ª–µ–¥—É—é—â–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –≤–æ–∑–º–æ–∂–Ω–∞ —á–µ—Ä–µ–∑ %s", t_str)
		msg := tgbotapi.NewMessage(message.Chat.ID, msg_text)
		msg.ReplyMarkup = list_kb
		_, err := b.bot.Send(msg)
		if err != nil {
			slog.Error("error send message to user")
			return fmt.Errorf("%s: %w", path, err)
		}
		slog.Info("–ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º, –∫–æ—Ç–æ—Ä—ã–π —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª —Ä–∞—Å—Å—ã–ª–∫—É",
			slog.String("user", message.From.String()),
			slog.Int64("id", message.Chat.ID))

		return nil
	}

	room_code, err := b.rep.GetUserStatus(message.Chat.ID, "room")
	if err != nil {
		slog.Error("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∏–∑ –ë–î –¥–∞–Ω–Ω—ã—Ö –æ —Å–æ–∑–¥–∞–Ω–Ω–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∫–æ–º–Ω–∞—Ç–µ")
		return fmt.Errorf("%s: %w", path, err)
	}
	if room_code == "" {
		msg_text := "–ü—Ä–∏—à–ª–∏ –º–Ω–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ (—Ñ–∞–π–ª—ã –∏ —Ñ–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –Ω–µ —É–º–µ—é), " +
			"–∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω —Ç–≤–æ–∏–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º:\n"
		msg := tgbotapi.NewMessage(message.Chat.ID, msg_text)
		msg.ReplyMarkup = cancel_kb
		_, err := b.bot.Send(msg)
		if err != nil {
			slog.Error("error send message to user")
			return fmt.Errorf("%s: %w", path, err)
		}
		b.rep.SaveUserStatus(message.Chat.ID, "status", "wait_post")
		slog.Info("–•–æ—Å—Ç–µ—Ä –±–µ–∑ —Ä—É–º—ã –∑–∞–ø—É—Å—Ç–∏–ª –∫–æ–º–∞–Ω–¥—É —Ä–∞—Å—Å—ã–ª–∫–∏, –∂–¥—É —Ç–µ–∫—Å—Ç",
			slog.String("user", message.From.String()),
			slog.Int64("id", message.Chat.ID))
		return nil

	} else {
		room, err := b.rep.GetRoom(room_code)
		if err != nil {
			slog.Error("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∏–∑ –ë–î –¥–∞–Ω–Ω—ã—Ö –æ —Å–æ–∑–¥–∞–Ω–Ω–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∫–æ–º–Ω–∞—Ç–µ")
			return fmt.Errorf("%s: %w", path, err)
		}
		kb := tgbotapi.NewInlineKeyboardMarkup(
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("–û—Ç–ø—Ä–∞–≤–∏—Ç—å —à–∞–±–ª–æ–Ω", "send_template"),
				tgbotapi.NewInlineKeyboardButtonData("–û—Ç–º–µ–Ω–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É", "cancel"),
			),
		)
		draft_post := fmt.Sprintf("_–ü—Ä–∏–≤–µ—Ç!\n–ó–∞—Ö–æ–¥–∏ –∫–æ –º–Ω–µ –ø–æ–∏–≥—Ä–∞—Ç—å, "+
			"—è –∏–≥—Ä–∞—é –Ω–∞ –∫–∞—Ä—Ç–µ %s, —Ä–µ–∂–∏–º %s, –∫–æ–¥:_\n\n`%s`", room.Map, room.Mode, room.Code)
		msg_text := "–ü—Ä–∏—à–ª–∏ –º–Ω–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ (—Ñ–∞–π–ª—ã –∏ —Ñ–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –Ω–µ —É–º–µ—é), " +
			"–∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω —Ç–≤–æ–∏–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º,\n" +
			"*–∏–ª–∏* –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É \"**–û—Ç–ø—Ä–∞–≤–∏—Ç—å —à–∞–±–ª–æ–Ω**\", —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å " +
			"—Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n\n--------------------------------------------------\n" + draft_post
		msg := tgbotapi.NewMessage(message.Chat.ID, msg_text)
		msg.ParseMode = "Markdown"
		msg.ReplyMarkup = kb
		_, err = b.bot.Send(msg)
		if err != nil {
			slog.Error("error send message to user")
			return fmt.Errorf("%s: %w", path, err)
		}
		b.rep.SaveUserStatus(message.Chat.ID, "status", "wait_post")
		slog.Info("–•–æ—Å—Ç–µ—Ä —Å –∞–∫—Ç–∏–≤–Ω–æ–π —Ä—É–º–æ–π –∑–∞–ø—É—Å—Ç–∏–ª –∫–æ–º–∞–Ω–¥—É —Ä–∞—Å—Å—ã–ª–∫–∏, –∂–¥—É —Ç–µ–∫—Å—Ç",
			slog.String("hoster", host.Name),
			slog.Int64("id", message.Chat.ID))
		return nil
	}
}

func (b *Telegram) sendPost(message *tgbotapi.Message, post string) error {
	const path = "service.telegram.notify.sendPost"

	// –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ —Ö–æ—Å—Ç–µ—Ä–∞ –∏–∑ –ë–î
	host, err := b.rep.GetHoster(message.Chat.ID)
	if err != nil {
		slog.Error("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∏–∑ –ë–î –¥–∞–Ω–Ω—ã—Ö –æ —Ö–æ—Å—Ç–µ—Ä–µ")
		return fmt.Errorf("%s: %w", path, err)
	}
	if host == nil {
		slog.Error("–•–æ—Å—Ç–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î")
		return fmt.Errorf("%s: %s", path, "—Ö–æ—Å—Ç–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î")
	}

	followers := host.Followers
	if len(followers) == 0 {
		slog.Warn("–•–æ—Å—Ç–µ—Ä –ø–æ–ø—ã—Ç–∞–ª—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É, –Ω–æ —É –Ω–µ–≥–æ –Ω–µ—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤",
			slog.String("hoster", host.Name),
			slog.Int64("id", message.Chat.ID))
		return nil
	} else {
		post = fmt.Sprintf("*%s* –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ:\n\n"+
			"--------------------------------------------------\n%s", host.Name, post)
		go b.notify(followers, host.ID, post)
		if err != nil {
			slog.Error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º")
			return fmt.Errorf("%s: %w", path, err)
		}

		host.LastSend = time.Now()
		err = b.rep.SaveHoster(host)
		if err != nil {
			slog.Error("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–æ–¥–µ–ª–∏ —Ö–æ—Å—Ç–µ—Ä–∞ –≤ –ë–î")
			return fmt.Errorf("%s: %w", path, err)
		}

		msg_text := fmt.Sprintf("–†–∞—Å—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ *%d* –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º", len(followers))
		msg := tgbotapi.NewMessage(message.Chat.ID, msg_text)
		msg.ParseMode = "Markdown"
		msg.ReplyMarkup = list_kb
		_, err = b.bot.Send(msg)
		if err != nil {
			slog.Error("error send message to user")
			return fmt.Errorf("%s: %w", path, err)
		}
		slog.Info("–•–æ—Å—Ç–µ—Ä —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏–ª —Ä–∞—Å—Å—ã–ª–∫—É",
			slog.String("hoster", host.Name),
			slog.Int64("id", message.Chat.ID),
			slog.String("post", post),
			slog.Int("followers", len(followers)))

		return nil
	}

}

func (b *Telegram) notify(followers []models.User, hostID int64, post string) {
	const path = "service.telegram.notify.notify"

	for _, follower := range followers {
		msg := tgbotapi.NewMessage(follower.ID, post)
		msg.ParseMode = "Markdown"
		_, err := b.bot.Send(msg)
		if err != nil {
			switch err.Error() {
			case "Forbidden: bot was blocked by the user":
				slog.Warn("–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –±–æ—Ç–∞")
				txt, err := b.unsubscribe(follower.ID, hostID)
				if err != nil {
					slog.Warn("–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—Ç–ø–∏—Å–∫–∏ –æ—Ç —Ö–æ—Å—Ç–µ—Ä–∞",
						slog.Int64("hostID", hostID),
						slog.Int64("userID", follower.ID),
						slog.String("error", err.Error()),
						slog.String("txt", txt))
				}
			case "Forbidden: user is deactivated":
				slog.Warn("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å TG —É–¥–∞–ª—ë–Ω")
				txt, err := b.unsubscribe(follower.ID, hostID)
				if err != nil {
					slog.Warn("–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—Ç–ø–∏—Å–∫–∏ –æ—Ç —Ö–æ—Å—Ç–µ—Ä–∞",
						slog.Int64("hostID", hostID),
						slog.Int64("userID", follower.ID),
						slog.String("error", err.Error()),
						slog.String("txt", txt))
				}
			default:
				slog.Error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å—á–∏–∫—É",
					slog.Int64("id", follower.ID),
					slog.String("follower", follower.Name),
					slog.String("error", err.Error()),
					slog.String("path", path))
			}
		}
		time.Sleep(time.Millisecond * 50)
	}
}

func sendImage(b *Telegram, chatID int64, imagePath string) error {
	// –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π
	file, err := os.Open(imagePath)
	if err != nil {
		return err
	}
	defer file.Close()

	// –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç File –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤ Telegram
	fileInfo, err := file.Stat()
	if err != nil {
		return err
	}
	fileBytes := make([]byte, fileInfo.Size())
	_, err = file.Read(fileBytes)
	if err != nil {
		return err
	}
	fileObj := tgbotapi.FileBytes{
		Name:  fileInfo.Name(),
		Bytes: fileBytes,
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
	msg := tgbotapi.NewPhoto(chatID, fileObj)
	_, err = b.bot.Send(msg)
	if err != nil {
		return err
	}

	return nil
}
