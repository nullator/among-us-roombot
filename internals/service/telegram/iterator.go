package telegram

import (
	"among-us-roombot/internals/models"
	"fmt"
	"log/slog"
	"time"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

// –ú–µ—Ç–æ–¥ –±–æ—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–º–Ω–∞—Ç—ã –Ω–∞ –≤—Ä–µ–º—è –∏—Ö —Å–æ–∑–¥–∞–Ω–∏—è –¥–ª—è —Ü–µ–ª–µ–π —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç–∞—Ä—ã—Ö –∫–æ–º–Ω–∞—Ç
func (b *Telegram) Iterate() {
	for {
		err := b.checkRooms()
		if err != nil {
			slog.Error("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–º–Ω–∞—Ç", slog.String("error", err.Error()))
		}
		time.Sleep(time.Second * 20)
	}
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–Ω–∞—Ç –Ω–∞ –≤—Ä–µ–º—è –∏—Ö —Å–æ–∑–¥–∞–Ω–∏—è
func (b *Telegram) checkRooms() error {
	const path = "service.telegram.iterator.checkRooms"
	var rooms models.RoomList

	// –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–Ω–∞—Ç –∏–∑ –ë–î
	rooms, err := b.rep.GetRoomList()
	if err != nil {
		slog.Error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–Ω–∞—Ç –∏–∑ –ë–î")
		return fmt.Errorf("%s: %w", path, err)
	}

	for _, room := range rooms {
		// –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã
		if time.Now().After(room.Time.Add(time.Minute * 240)) {

			// –ï—Å–ª–∏ –∫–æ–º–Ω–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞ –¥–∞–≤–Ω–æ –∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
			// —Ç–æ –µ–º—É –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
			if !room.Warning {
				msgText := fmt.Sprintf("*–ü—Ä–æ–¥–ª–µ–≤–∞—Ç—å –±—É–¥–µ—Ç–µ?*\n\n" +
					"–¢–≤–æ—è —Ä—É–º–∞ —Å–æ–∑–¥–∞–Ω–∞ –±–æ–ª–µ–µ 4 —á–∞—Å–æ–≤ –Ω–∞–∑–∞–¥\\. " +
					"–ï—Å–ª–∏ –∫–æ–¥ –µ—â—ë –∞–∫—Ç—É–∞–ª–µ–Ω, –ø—Ä–æ—à—É –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É \"–ü—Ä–æ–¥–ª–∏—Ç—å\" " +
					"\\(–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º \"–ü—Ä–æ–¥–ª–∏—Ç—å\"\\)\\. " +
					"–ï—Å–ª–∏ —Ä—É–º–∞ –Ω–µ –∞–∫—Ç—É–∞–ª—å–Ω–∞, —É–¥–∞–ª–∏ –µ—ë –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É \"–£–¥–∞–ª–∏—Ç—å\" " +
					"\\(–∏–ª–∏ –∫–æ–º–∞–Ω–¥–æ–π /del\\)\\.")
				msg := tgbotapi.NewMessage(room.ID, msgText)
				var kb = tgbotapi.NewInlineKeyboardMarkup(
					tgbotapi.NewInlineKeyboardRow(
						tgbotapi.NewInlineKeyboardButtonData("–ü—Ä–æ–¥–ª–∏—Ç—å", "add_time"),
						tgbotapi.NewInlineKeyboardButtonData("–£–¥–∞–ª–∏—Ç—å", "delete"),
					),
				)
				msg.ReplyMarkup = kb
				msg.ParseMode = "MarkdownV2"
				_, err = b.bot.Send(msg)
				if err != nil {
					// –û—Ç–¥–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è –Ω–µ —É—Å–ø–µ–ª –ª–∏ —Ö–æ—Å—Ç–µ—Ä –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç–∞
					if err.Error() == "Forbidden: bot was blocked by the user" {
						slog.Warn("–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –±–æ—Ç–∞")
						err := b.rep.DeleteRoom(room.Code)
						if err != nil {
							slog.Error("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —É—Å—Ç–∞—Ä–µ–≤—à–µ–π –∫–æ–º–Ω–∞—Ç—ã –∏–∑ –ë–î",
								slog.String("error", err.Error()))
							return fmt.Errorf("%s: %w", path, err)
						}
						err = b.rep.SaveUserStatus(room.ID, "room", "")
						if err != nil {
							slog.Error("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î –¥–∞–Ω–Ω—ã—Ö –æ –∫–æ–º–Ω–∞—Ç–µ",
								slog.String("error", err.Error()))
							return fmt.Errorf("%s: %w", path, err)
						}
						slog.Info("–£—Å—Ç–∞—Ä–µ–≤—à–∞—è –∫–æ–º–Ω–∞—Ç–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª–µ–Ω–∞ (–±–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω)",
							slog.String("code", room.Code),
							slog.String("user", room.Hoster),
							slog.Int64("id", room.ID))
					} else {
						slog.Error("error send message to user")
						return fmt.Errorf("%s: %w", path, err)
					}
				}

				// –§–ª–∞–≥ —Å—Ç–∞–≤–∏—Ç—å—Å—è —á—Ç–æ–±—ã –Ω–µ –Ω–∞–ø—Ä–∞–≤–ª—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ
				room.Warning = true
				err = b.rep.SaveRoom(&room)
				slog.Info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ",
					slog.String("user", room.Hoster),
					slog.Int64("id", room.ID),
					slog.String("room", room.Code))
				if err != nil {
					slog.Error("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–∏",
						slog.String("error", err.Error()))
				}
			}
		}

		// –£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã
		if time.Now().After(room.Time.Add(time.Minute * 270)) {
			slog.Debug("–ö–æ–º–Ω–∞—Ç–∞ —É—Å—Ç–∞—Ä–µ–ª–∞, —É–¥–∞–ª—è—é",
				slog.String("room", room.Code))

			err := b.rep.DeleteRoom(room.Code)
			if err != nil {
				slog.Error("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —É—Å—Ç–∞—Ä–µ–≤—à–µ–π –∫–æ–º–Ω–∞—Ç—ã –∏–∑ –ë–î",
					slog.String("error", err.Error()))
				return fmt.Errorf("%s: %w", path, err)
			}
			err = b.rep.SaveUserStatus(room.ID, "room", "")
			if err != nil {
				slog.Error("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î –¥–∞–Ω–Ω—ã—Ö –æ –∫–æ–º–Ω–∞—Ç–µ",
					slog.String("error", err.Error()))
				return fmt.Errorf("%s: %w", path, err)
			}
			msgText := fmt.Sprintf("–ö–æ–º–Ω–∞—Ç–∞ %s –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª–µ–Ω–∞", room.Code)
			msg := tgbotapi.NewMessage(room.ID, msgText)
			msg.ReplyMarkup = list_kb
			_, err = b.bot.Send(msg)
			if err != nil {
				slog.Error("error send message to user")
				return fmt.Errorf("%s: %w", path, err)
			}
			slog.Info("–£—Å—Ç–∞—Ä–µ–≤—à–∞—è –∫–æ–º–Ω–∞—Ç–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª–µ–Ω–∞",
				slog.String("code", room.Code),
				slog.String("user", room.Hoster),
				slog.Int64("id", room.ID))
		}
	}

	return nil
}

// –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–¥–ª–µ–≤–∞–µ—Ç –≤—Ä–µ–º—è –∂–∏–∑–Ω–∏ –∫–æ–º–Ω–∞—Ç—ã –æ–±–Ω–æ–≤–ª—è—è –≤—Ä–µ–º—è –µ—ë —Å–æ–∑–¥–∞–Ω–∏—è –∏ —Å–±—Ä–∞—Å—ã–≤–∞—è —Ñ–ª–∞–≥ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
func (b *Telegram) addTime(message *tgbotapi.Message) error {
	const path = "service.telegram.iterator.addTime"

	// –ü–æ–ª—É—á–∏—Ç—å –∫–æ–¥ –∫–æ–º–Ω–∞—Ç—ã
	exist_room, err := b.rep.GetUserStatus(message.Chat.ID, "room")
	if err != nil {
		slog.Error("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∏–∑ –ë–î –¥–∞–Ω–Ω—ã—Ö –æ —Å–æ–∑–¥–∞–Ω–Ω–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∫–æ–º–Ω–∞—Ç–µ")
		return fmt.Errorf("%s: %w", path, err)
	}

	if exist_room == "" {
		slog.Warn("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—ã—Ç–∞–µ—Ç—Å—è –ø—Ä–æ–¥–ª–∏—Ç—å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∫–æ–º–Ω–∞—Ç—É",
			slog.String("user", message.From.String()),
			slog.Int64("id", message.Chat.ID))
		return nil
	}

	// –ü–æ–ª—É—á–∏—Ç—å –∫–æ–º–Ω–∞—Ç—É –∏–∑ –ë–î
	room, err := b.rep.GetRoom(exist_room)
	if err != nil {
		slog.Error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã –∏–∑ –ë–î",
			slog.String("error", err.Error()))
		return fmt.Errorf("%s: %w", path, err)
	}

	// –î–æ–±–∞–≤–∏—Ç—å –≤—Ä–µ–º—è
	room.Time = time.Now()
	room.Warning = false

	// –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –ë–î
	err = b.rep.SaveRoom(room)
	if err != nil {
		slog.Error("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î –¥–∞–Ω–Ω—ã—Ö –æ –∫–æ–º–Ω–∞—Ç–µ",
			slog.String("error", err.Error()))
		return fmt.Errorf("%s: %w", path, err)
	}

	// –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
	msgText := fmt.Sprintf("–ö–æ–º–Ω–∞—Ç–∞ %s –ø—Ä–æ–¥–ª–µ–Ω–∞.\n\n"+
		"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ –∑–∞–±—É–¥—å –µ—ë —É–¥–∞–ª–∏—Ç—å –∫–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—à—å –∏–≥—Ä–∞—Ç—å.\n\nüëç", room.Code)
	msg := tgbotapi.NewMessage(room.ID, msgText)
	msg.ReplyMarkup = list_kb
	_, err = b.bot.Send(msg)
	if err != nil {
		slog.Error("error send message to user")
		return fmt.Errorf("%s: %w", path, err)
	}
	slog.Info("–ö–æ–º–Ω–∞—Ç–∞ –ø—Ä–æ–¥–ª–µ–Ω–∞",
		slog.String("code", room.Code),
		slog.String("user", room.Hoster),
		slog.Int64("id", room.ID))

	return nil

}
