package telegram

import (
	"log/slog"
	"strconv"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

func (b *Telegram) handleButton(update *tgbotapi.Update, button string, id int64) {
	switch button {
	case "delete":
		err := b.delete(update.CallbackQuery.Message)
		if err != nil {
			slog.Error("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã",
				slog.String("error", err.Error()))
		}

	case "add_time":
		err := b.addTime(update.CallbackQuery.Message)
		if err != nil {
			slog.Error("–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏",
				slog.String("error", err.Error()))
		}

	case "save_old_name":
		slog.Info("–ó–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å—Ç–∞—Ä–æ–≥–æ –Ω–∏–∫–∞ —Ö–æ—Å—Ç–µ—Ä–∞",
			slog.String("user", update.CallbackQuery.Message.Chat.UserName),
			slog.Int64("id", update.CallbackQuery.Message.Chat.ID))
		old_name, err := b.rep.GetUserStatus(id, "host_name")
		slog.Debug("–ü–æ–ª—É—á–µ–Ω —Å—Ç–∞—Ä—ã–π –Ω–∏–∫ —Ö–æ—Å—Ç–µ—Ä–∞ –∏–∑ –ë–î", slog.String("host_name", old_name))
		if err != nil {
			slog.Error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∑ –ë–î –¥–∞–Ω–Ω—ã—Ö –æ —Å—Ç–∞—Ä–æ–º –Ω–∏–∫–µ —Ö–æ—Å—Ç–µ—Ä–∞",
				slog.String("error", err.Error()))
			msg := tgbotapi.NewMessage(id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã")
			msg.ReplyMarkup = list_kb
			_, err := b.bot.Send(msg)
			if err != nil {
				slog.Error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è",
					slog.String("error", err.Error()))
			}
		}
		err = b.addHostName(update.CallbackQuery.Message, old_name)
		if err != nil {
			slog.Error("–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–∏–∫–∞ —Ö–æ—Å—Ç–µ—Ä–∞",
				slog.String("error", err.Error()))
			msg := tgbotapi.NewMessage(id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã")
			msg.ReplyMarkup = list_kb
			_, err = b.bot.Send(msg)
			if err != nil {
				slog.Error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è",
					slog.String("error", err.Error()))
			}

		} else {
			kb := tgbotapi.NewInlineKeyboardMarkup(
				tgbotapi.NewInlineKeyboardRow(
					tgbotapi.NewInlineKeyboardButtonData("üöÄ Skeld", "skeld"),
					tgbotapi.NewInlineKeyboardButtonData("‚õÑ Polus", "polus"),
				),
				tgbotapi.NewInlineKeyboardRow(
					tgbotapi.NewInlineKeyboardButtonData("üçÑ Fungle", "fungle"),
					tgbotapi.NewInlineKeyboardButtonData("üõ©Ô∏è Airship", "airship"),
				),
				tgbotapi.NewInlineKeyboardRow(
					tgbotapi.NewInlineKeyboardButtonData("üè¢ Mira HQ", "mira"),
					tgbotapi.NewInlineKeyboardButtonData("‚ùå –û—Ç–º–µ–Ω–∞", "cancel"),
				),
			)
			msg := tgbotapi.NewMessage(id,
				"–í—ã–±–µ—Ä–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã –∏–ª–∏ –≤–≤–µ–¥–∏ —Å–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç "+
					"(–Ω–µ –±–æ–ª–µ–µ 10 —Å–∏–º–≤–æ–ª–æ–≤):\n")
			msg.ReplyMarkup = kb
			_, err := b.bot.Send(msg)
			if err != nil {
				slog.Error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è",
					slog.String("error", err.Error()))
			}
			b.rep.SaveUserStatus(id, "status", "wait_mapname")

		}

	case "skeld":
		slog.Info("–ó–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –≤—ã–±–æ—Ä–∞ –∫–∞—Ä—Ç—ã Skeld",
			slog.String("user", update.CallbackQuery.Message.Chat.UserName),
			slog.Int64("id", update.CallbackQuery.Message.Chat.ID))

		b.handleMap(update, id, "Skeld")

	case "polus":
		slog.Info("–ó–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –≤—ã–±–æ—Ä–∞ –∫–∞—Ä—Ç—ã Polus",
			slog.String("user", update.CallbackQuery.Message.Chat.UserName),
			slog.Int64("id", update.CallbackQuery.Message.Chat.ID))

		b.handleMap(update, id, "Polus")

	case "fungle":
		slog.Info("–ó–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –≤—ã–±–æ—Ä–∞ –∫–∞—Ä—Ç—ã Fungle",
			slog.String("user", update.CallbackQuery.Message.Chat.UserName),
			slog.Int64("id", update.CallbackQuery.Message.Chat.ID))

		b.handleMap(update, id, "Fungle")

	case "airship":
		slog.Info("–ó–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –≤—ã–±–æ—Ä–∞ –∫–∞—Ä—Ç—ã Airship",
			slog.String("user", update.CallbackQuery.Message.Chat.UserName),
			slog.Int64("id", update.CallbackQuery.Message.Chat.ID))

		b.handleMap(update, id, "Airship")

	case "mira":
		slog.Info("–ó–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –≤—ã–±–æ—Ä–∞ –∫–∞—Ä—Ç—ã Mira HQ",
			slog.String("user", update.CallbackQuery.Message.Chat.UserName),
			slog.Int64("id", update.CallbackQuery.Message.Chat.ID))

		b.handleMap(update, id, "Mira HQ")

	case "classic":
		slog.Info("–ó–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞ Classic",
			slog.String("user", update.CallbackQuery.Message.Chat.UserName),
			slog.Int64("id", update.CallbackQuery.Message.Chat.ID))

		b.handleMode(update, id, "–ö–ª–∞—Å—Å–∏–∫–∞")

	case "hide":
		slog.Info("–ó–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞ Hide and Seek",
			slog.String("user", update.CallbackQuery.Message.Chat.UserName),
			slog.Int64("id", update.CallbackQuery.Message.Chat.ID))

		b.handleMode(update, id, "–ü—Ä—è—Ç–∫–∏")

	case "mods":
		slog.Info("–ó–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞ Mods",
			slog.String("user", update.CallbackQuery.Message.Chat.UserName),
			slog.Int64("id", update.CallbackQuery.Message.Chat.ID))

		b.handleMode(update, id, "–ú–æ–¥—ã")

	case "change_code":
		slog.Info("–ó–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–¥–∞ –∫–æ–º–Ω–∞—Ç—ã",
			slog.String("user", update.CallbackQuery.Message.Chat.UserName),
			slog.Int64("id", update.CallbackQuery.Message.Chat.ID))
		err := b.rep.SaveUserStatus(id, "status", "edit_code")
		if err != nil {
			slog.Error("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î –¥–∞–Ω–Ω—ã—Ö –æ —Å—Ç–∞—Ç—É—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
				slog.String("error", err.Error()))
			msg := tgbotapi.NewMessage(id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã")
			msg.ReplyMarkup = list_kb
			_, err := b.bot.Send(msg)
			if err != nil {
				slog.Error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è",
					slog.String("error", err.Error()))
			}
		}
		msg := tgbotapi.NewMessage(id, "–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –Ω–æ–≤—ã–π –∫–æ–¥ –∫–æ–º–Ω–∞—Ç—ã:")
		msg.ReplyMarkup = cancel_kb
		_, err = b.bot.Send(msg)
		if err != nil {
			slog.Error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è",
				slog.String("error", err.Error()))
		}

	case "change_map":
		slog.Info("–ó–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ä—Ç—ã",
			slog.String("user", update.CallbackQuery.Message.Chat.UserName),
			slog.Int64("id", update.CallbackQuery.Message.Chat.ID))
		err := b.rep.SaveUserStatus(id, "status", "change_map")
		if err != nil {
			slog.Error("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î –¥–∞–Ω–Ω—ã—Ö –æ —Å—Ç–∞—Ç—É—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
				slog.String("error", err.Error()))
			msg := tgbotapi.NewMessage(id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã")
			msg.ReplyMarkup = list_kb
			_, err := b.bot.Send(msg)
			if err != nil {
				slog.Error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è",
					slog.String("error", err.Error()))
			}
		}
		kb := tgbotapi.NewInlineKeyboardMarkup(
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("üöÄ Skeld", "change_skeld"),
				tgbotapi.NewInlineKeyboardButtonData("‚õÑ Polus", "change_polus"),
			),
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("üçÑ Fungle", "change_fungle"),
				tgbotapi.NewInlineKeyboardButtonData("üõ©Ô∏è Airship", "change_airship"),
			),
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("üè¢ Mira HQ", "change_mira"),
				tgbotapi.NewInlineKeyboardButtonData("‚ùå –û—Ç–º–µ–Ω–∞", "cancel"),
			),
		)
		msg := tgbotapi.NewMessage(id,
			"–í—ã–±–µ—Ä–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã –∏–ª–∏ –≤–≤–µ–¥–∏ —Å–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç "+
				"(–Ω–µ –±–æ–ª–µ–µ 10 —Å–∏–º–≤–æ–ª–æ–≤):\n")
		msg.ReplyMarkup = kb
		_, err = b.bot.Send(msg)
		if err != nil {
			slog.Error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è",
				slog.String("error", err.Error()))
		}

	case "change_skeld":
		slog.Info("–ó–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ä—Ç—ã –Ω–∞ Skeld",
			slog.String("user", update.CallbackQuery.Message.Chat.UserName),
			slog.Int64("id", update.CallbackQuery.Message.Chat.ID))

		b.handleNewMap(update, id, "Skeld")

	case "change_polus":
		slog.Info("–ó–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ä—Ç—ã –Ω–∞ Polus",
			slog.String("user", update.CallbackQuery.Message.Chat.UserName),
			slog.Int64("id", update.CallbackQuery.Message.Chat.ID))

		b.handleNewMap(update, id, "Polus")

	case "change_fungle":
		slog.Info("–ó–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ä—Ç—ã –Ω–∞ Fungle",
			slog.String("user", update.CallbackQuery.Message.Chat.UserName),
			slog.Int64("id", update.CallbackQuery.Message.Chat.ID))

		b.handleNewMap(update, id, "Fungle")

	case "change_airship":
		slog.Info("–ó–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ä—Ç—ã –Ω–∞ Airship",
			slog.String("user", update.CallbackQuery.Message.Chat.UserName),
			slog.Int64("id", update.CallbackQuery.Message.Chat.ID))

		b.handleNewMap(update, id, "Airship")

	case "change_mira":
		slog.Info("–ó–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ä—Ç—ã –Ω–∞ Mira",
			slog.String("user", update.CallbackQuery.Message.Chat.UserName),
			slog.Int64("id", update.CallbackQuery.Message.Chat.ID))

		b.handleNewMap(update, id, "Mira HQ")

	case "change_hoster":
		slog.Info("–ó–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∏–∫–∞ —Ö–æ—Å—Ç–µ—Ä–∞",
			slog.String("user", update.CallbackQuery.Message.Chat.UserName),
			slog.Int64("id", update.CallbackQuery.Message.Chat.ID))
		err := b.rep.SaveUserStatus(id, "status", "change_hoster")
		if err != nil {
			slog.Error("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î –¥–∞–Ω–Ω—ã—Ö –æ —Å—Ç–∞—Ç—É—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
				slog.String("error", err.Error()))
			msg := tgbotapi.NewMessage(id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã")
			msg.ReplyMarkup = list_kb
			_, err := b.bot.Send(msg)
			if err != nil {
				slog.Error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è",
					slog.String("error", err.Error()))
			}
		}
		msg := tgbotapi.NewMessage(id, "–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –Ω–æ–≤—ã–π –Ω–∏–∫ —Ö–æ—Å—Ç–µ—Ä–∞:")
		msg.ReplyMarkup = cancel_kb
		_, err = b.bot.Send(msg)
		if err != nil {
			slog.Error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è",
				slog.String("error", err.Error()))
		}

	case "change_description":
		slog.Info("–ó–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è —Ä–µ–∂–∏–º–∞",
			slog.String("user", update.CallbackQuery.Message.Chat.UserName),
			slog.Int64("id", update.CallbackQuery.Message.Chat.ID))
		err := b.rep.SaveUserStatus(id, "status", "change_description")
		if err != nil {
			slog.Error("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î –¥–∞–Ω–Ω—ã—Ö –æ —Å—Ç–∞—Ç—É—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
				slog.String("error", err.Error()))
			msg := tgbotapi.NewMessage(id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã")
			msg.ReplyMarkup = list_kb
			_, err := b.bot.Send(msg)
			if err != nil {
				slog.Error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è",
					slog.String("error", err.Error()))
			}
		}
		kb := tgbotapi.NewInlineKeyboardMarkup(
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("üë®‚Äçüéì –ö–ª–∞—Å—Å–∏–∫–∞", "change_classic"),
				tgbotapi.NewInlineKeyboardButtonData("üßå –ü—Ä—è—Ç–∫–∏", "change_hide"),
			),
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("üõ†Ô∏è –ú–æ–¥—ã", "change_mods"),
				tgbotapi.NewInlineKeyboardButtonData("‚ùå –û—Ç–º–µ–Ω–∞", "cancel"),
			),
		)
		msg := tgbotapi.NewMessage(id,
			"–í—ã–±–µ—Ä–∏ —Ä–µ–∂–∏–º –∏–≥—Ä—ã –∏–ª–∏ –≤–≤–µ–¥–∏ —Å–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç "+
				"(–Ω–µ –±–æ–ª–µ–µ 10 —Å–∏–º–≤–æ–ª–æ–≤):\n")
		msg.ReplyMarkup = kb
		_, err = b.bot.Send(msg)
		if err != nil {
			slog.Error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è",
				slog.String("error", err.Error()))
		}

	case "change_classic":
		slog.Info("–ó–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è —Ä–µ–∂–∏–º–∞ –Ω–∞ Classic",
			slog.String("user", update.CallbackQuery.Message.Chat.UserName),
			slog.Int64("id", update.CallbackQuery.Message.Chat.ID))

		b.handleNewMode(update, id, "–ö–ª–∞—Å—Å–∏–∫–∞")

	case "change_hide":
		slog.Info("–ó–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è —Ä–µ–∂–∏–º–∞ –Ω–∞ Hide and Seek",
			slog.String("user", update.CallbackQuery.Message.Chat.UserName),
			slog.Int64("id", update.CallbackQuery.Message.Chat.ID))

		b.handleNewMode(update, id, "–ü—Ä—è—Ç–∫–∏")

	case "change_mods":
		slog.Info("–ó–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è —Ä–µ–∂–∏–º–∞ –Ω–∞ Mods",
			slog.String("user", update.CallbackQuery.Message.Chat.UserName),
			slog.Int64("id", update.CallbackQuery.Message.Chat.ID))

		b.handleNewMode(update, id, "–ú–æ–¥—ã")

	case "cancel":
		slog.Info("–ó–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã –∫–æ–º–∞–Ω–¥—ã",
			slog.String("user", update.CallbackQuery.Message.Chat.UserName),
			slog.Int64("id", update.CallbackQuery.Message.Chat.ID))
		err := b.rep.SaveUserStatus(id, "status", "null")
		if err != nil {
			slog.Error("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î –¥–∞–Ω–Ω—ã—Ö –æ —Å—Ç–∞—Ç—É—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
				slog.String("error", err.Error()))
		}
		msg := tgbotapi.NewMessage(id, "–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –æ—Ç–º–µ–Ω–µ–Ω–æ")
		msg.ReplyMarkup = list_kb
		_, err = b.bot.Send(msg)
		if err != nil {
			slog.Error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è",
				slog.String("error", err.Error()))
		}

	case "roomlist":
		slog.Info("–ó–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –≤—ã–≤–æ–¥–∞ —Å–ø–∏—Å–∫–∞ –∫–æ–º–Ω–∞—Ç",
			slog.String("user", update.CallbackQuery.Message.Chat.UserName),
			slog.Int64("id", update.CallbackQuery.Message.Chat.ID))
		err := b.handleList(update.CallbackQuery.Message)
		if err != nil {
			slog.Error("–û—à–∏–±–∫–∞ –≤—ã–≤–æ–¥–∞ —Å–ø–∏—Å–∫–∞ –∫–æ–º–Ω–∞—Ç",
				slog.String("error", err.Error()))
		}

	default:
		cmd := string([]rune(button)[0:3])
		slog.Debug("–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞", slog.String("cmd", cmd))
		switch cmd {
		case "sub":
			userID := update.CallbackQuery.Message.Chat.ID
			hostID_str := string([]rune(button)[3:])
			hostID, err := strconv.ParseInt(hostID_str, 10, 64)

			slog.Debug("–ü–æ–ª—É—á–µ–Ω—ã –∞—Ä–≥—É–º–µ–Ω—Ç—ã",
				slog.Int64("userID", userID),
				slog.Int64("hostID", hostID))
			if err != nil {
				slog.Error("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ ID —Ö–æ—Å—Ç–∞",
					slog.String("error", err.Error()))
				return
			}
			err = b.subscribe(update.CallbackQuery, userID, hostID)
			if err != nil {
				slog.Error("–û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏",
					slog.String("error", err.Error()))
				msg := tgbotapi.NewMessage(update.CallbackQuery.Message.Chat.ID,
					"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ö–æ—Å—Ç–µ—Ä–∞")
				msg.ReplyMarkup = list_kb
				_, err := b.bot.Send(msg)
				if err != nil {
					slog.Error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è",
						slog.String("error", err.Error()))
				}
			}
		}
	}
}

func (b *Telegram) handleMap(update *tgbotapi.Update, id int64, mapa string) {
	err := b.addMapName(update.CallbackQuery.Message, mapa)
	if err != nil {
		slog.Error("–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ä—Ç—ã",
			slog.String("error", err.Error()))
		msg := tgbotapi.NewMessage(id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã")
		msg.ReplyMarkup = list_kb
		_, err = b.bot.Send(msg)
		if err != nil {
			slog.Error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è",
				slog.String("error", err.Error()))
		}
	} else {
		kb := tgbotapi.NewInlineKeyboardMarkup(
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("üë®‚Äçüéì –ö–ª–∞—Å—Å–∏–∫–∞", "classic"),
				tgbotapi.NewInlineKeyboardButtonData("üßå –ü—Ä—è—Ç–∫–∏", "hide"),
			),
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("üõ†Ô∏è –ú–æ–¥—ã", "mods"),
				tgbotapi.NewInlineKeyboardButtonData("‚ùå –û—Ç–º–µ–Ω–∞", "cancel"),
			),
		)
		msg := tgbotapi.NewMessage(id,
			"–í—ã–±–µ—Ä–∏ —Ä–µ–∂–∏–º –∏–≥—Ä—ã –∏–ª–∏ –≤–≤–µ–¥–∏ —Å–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç "+
				"(–Ω–µ –±–æ–ª–µ–µ 10 —Å–∏–º–≤–æ–ª–æ–≤):\n")
		msg.ReplyMarkup = kb
		_, err := b.bot.Send(msg)
		if err != nil {
			slog.Error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è",
				slog.String("error", err.Error()))
		}
		b.rep.SaveUserStatus(id, "status", "wait_gamemode")
	}
}

func (b *Telegram) handleMode(update *tgbotapi.Update, id int64, mode string) {
	err := b.addGameMode(update.CallbackQuery.Message, mode)
	if err != nil {
		slog.Error("–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞ –∏–≥—Ä—ã",
			slog.String("error", err.Error()))
		msg := tgbotapi.NewMessage(id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã")
		msg.ReplyMarkup = list_kb
		_, err = b.bot.Send(msg)
		if err != nil {
			slog.Error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è",
				slog.String("error", err.Error()))
		}
	} else {
		msg := tgbotapi.NewMessage(id, "*–ö–æ–º–Ω–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞*\n\n"+
			"–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –Ω–µ –∑–∞—Å–æ—Ä—è—Ç—å –±–æ—Ç–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–º–∏ –∫–æ–º–Ω–∞—Ç–∞–º–∏, "+
			"–Ω–µ –∑–∞–±—É–¥—å –µ—ë —É–¥–∞–ª–∏—Ç—å –∫–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—à—å –∏–≥—Ä–∞—Ç—å")
		msg.ReplyMarkup = list_kb
		msg.ParseMode = "markdownV2"
		_, err := b.bot.Send(msg)
		if err != nil {
			slog.Error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è",
				slog.String("error", err.Error()))
		}
		b.rep.SaveUserStatus(id, "status", "null")
	}
}

func (b *Telegram) handleNewMap(update *tgbotapi.Update, id int64, mapa string) {
	err := b.changeMap(update.CallbackQuery.Message, mapa)
	if err != nil {
		slog.Error("–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ä—Ç—ã –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É",
			slog.String("error", err.Error()))
		msg := tgbotapi.NewMessage(id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã")
		msg.ReplyMarkup = list_kb
		_, err = b.bot.Send(msg)
		if err != nil {
			slog.Error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è",
				slog.String("error", err.Error()))
		}
	} else {
		msg := tgbotapi.NewMessage(id,
			"–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ")
		msg.ReplyMarkup = list_kb
		_, err := b.bot.Send(msg)
		if err != nil {
			slog.Error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è",
				slog.String("error", err.Error()))
		}
		b.rep.SaveUserStatus(id, "status", "null")
	}
}

func (b *Telegram) handleNewMode(update *tgbotapi.Update, id int64, mode string) {
	err := b.changeDescription(update.CallbackQuery.Message, mode)
	if err != nil {
		slog.Error("–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞ –∏–≥—Ä—ã –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É",
			slog.String("error", err.Error()))
		msg := tgbotapi.NewMessage(id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã")
		msg.ReplyMarkup = list_kb
		_, err = b.bot.Send(msg)
		if err != nil {
			slog.Error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è",
				slog.String("error", err.Error()))
		}
	} else {
		msg := tgbotapi.NewMessage(id,
			"–†–µ–∂–∏–º –∏–≥—Ä—ã —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω")
		msg.ReplyMarkup = list_kb
		_, err := b.bot.Send(msg)
		if err != nil {
			slog.Error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è",
				slog.String("error", err.Error()))
		}
		b.rep.SaveUserStatus(id, "status", "null")
	}
}
